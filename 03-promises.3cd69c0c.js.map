{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CAAEC,kBAAmB,WAAYC,qBAAsB,WAEnE,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAWF,SAASC,cAAc,yBAClCE,KAAKH,SAASC,cAAc,wBAC5BG,OAAOJ,SAASC,cAAc,2BAgChC,SAASI,EAAUC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC7BhB,EAAAE,OAAOe,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,CAG/D,SAASG,EAAQL,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC3BhB,EAAAE,OAAOkB,QAAQ,sBAAqCF,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,CAlC5DV,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,G,kBAOlB,IAAIC,EAAYb,EAChBc,YAAW,W,OAKQT,EALWU,EAKDT,EALIO,EAM7BG,EAAgBC,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BP,YAAW,WACLE,EACFI,EAAQ,CAAEf,WAAUC,UAEpBe,EAAO,CAAEhB,WAAUC,S,GAEpBA,E,KAfyCgB,KAAKnB,GAAWoB,MAAMd,GAKtE,IAAuBJ,EAAUC,EACzBU,C,IALJH,EAAYb,EAAaC,GAAQc,EAAI,E,EARvCH,EAAIY,iBAKJ,IAJA,IAAMxB,EAAayB,OAAO7B,EAAKI,WAAW0B,OACpCzB,EAAOwB,OAAO7B,EAAKK,KAAKyB,OACxBxB,EAASuB,OAAO7B,EAAKM,OAAOwB,OAEzBC,EAAI,EAAGA,GAAKzB,EAAQyB,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({ cssAnimationStyle: 'from-top', fontAwesomeIconStyle: 'shadow' });\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay:document.querySelector('input[name = \"delay\"]'),\n  step:document.querySelector('input[name = \"step\"]'),\n  amount:document.querySelector('input[name = \"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const firstDelay = Number(refs.firstDelay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n  \n  for (let i = 1; i <= amount; i += 1){\n    let delayStep = firstDelay;\n    setTimeout(()=> createPromise(i, delayStep).then(onSuccess).catch(onError));\n    delayStep = firstDelay + step * (i - 1);\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((fulfill, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        fulfill({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n};\n\nfunction onSuccess({ position, delay }) { \n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nfunction onError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n};"],"names":["$h6c0i","parcelRequire","Notify","init","cssAnimationStyle","fontAwesomeIconStyle","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","step","amount","$ce04d3a99e08e73b$var$onSuccess","param","position","delay","success","concat","$ce04d3a99e08e73b$var$onError","failure","addEventListener","evt","delayStep","setTimeout","i","shouldResolve","Math","random","Promise","fulfill","reject","then","catch","preventDefault","Number","value","i1","_loop"],"version":3,"file":"03-promises.3cd69c0c.js.map"}